image: node:18-bullseye-slim

stages:
  - lint
  - build
  - release
  - test

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "staging"
    - if: $CI_COMMIT_BRANCH == "deployment-automation"

default:
  cache:  # Cache modules in between jobs for the same branch if package-lock.json file changes
    key: 
      prefix: $CI_COMMIT_REF_NAME
      files:
        - server/package-lock.json
        - client/package-lock.json
    paths:
      - server/.npm/
      - client/.npm
  # run this before every job; will hit the cache first
  before_script:
   - cd server && npm ci --cache .npm --prefer-offline && cd ../client && npm ci --cache .npm --prefer-offline && cd ..

lint-server:
  stage: lint 
  script:
    - cd server && npm ci --cache .npm --prefer-offline
    - ./node_modules/eslint/bin/eslint.js --ext js,mjs,cjs . 
  allow_failure: false

lint-client:
  stage: lint 
  script:
    - cd client && npm ci --cache .npm --prefer-offline
    - ./node_modules/eslint/bin/eslint.js --ext js,jsx,mjs,cjs .
  allow_failure: false

server-side-test:
  stage: test
  script:
    - cd server && npm ci --cache .npm --prefer-offline
    - npm run test

client-side-build:
  stage: build
  script:
    - cd client && npm run build
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - client/build

build-app-archive:
  stage: release
  variables: 
    RELEASE_FILE: release-$CI_PROJECT_NAME-$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA.tar.gz
  dependencies:
    - client-side-build
  rules:
    # - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "deployment-automation"
  before_script: 
    - 'cd server && npm ci --omit dev && cd ../client && npm ci --omit dev'
  script:
    - "tar --exclude='./server/.npm' -zcvf $RELEASE_FILE client server"
  artifacts:
    expire_in: "30 days"
    paths:
      - "$RELEASE_FILE.tar.gz"
